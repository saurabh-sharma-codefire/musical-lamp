// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             String      @id @default(uuid()) @db.Char(36)
    user_name      String      @unique
    email          String      @unique
    password       String
    verified_email Boolean?
    createdAt      DateTime    @default(now())
    DriverLog      DriverLog[]
    Blobs          Blobs[]
    Session        Session?
    Otp            Otp?

    @@index([user_name, email], map: "user")
}

model Blobs {
    id        String   @id @default(uuid()) @db.Char(36)
    size      String
    type      String
    name      String
    user_id   String
    blob_url  String
    blob_id   String?  @db.Char(36)
    createdAt DateTime @default(now())

    User User  @relation(fields: [user_id], references: [id])
    Blob Blob? @relation(fields: [blob_id], references: [id])

    DriverLog DriverLog[]

    @@index([id, user_id], map: "blobs")
}

model Blob {
    id        String   @id @default(uuid()) @db.Char(36)
    data      Bytes
    createdAt DateTime @default(now())
    Blobs     Blobs[]

    @@index([id], map: "blob")
}

model DriverLog {
    id        String   @id @default(uuid()) @db.Char(36)
    blobs_id  String
    user_id   String
    action    String
    createdAt DateTime @default(now())

    Blobs Blobs @relation(fields: [blobs_id], references: [id])
    User  User  @relation(fields: [user_id], references: [id])

    @@index([id, blobs_id], map: "driver_log")
}

model Session {
    id         String   @id @default(uuid()) @db.Char(36)
    sid        String   @unique
    user_id    String?  @unique
    user       User?    @relation(fields: [user_id], references: [id])
    data       Json     @db.Json
    created_at DateTime @default(now())
    expiresAt  DateTime @db.Timestamp(6)

    @@index([expiresAt], map: "IDX_session_expire")
}

model Otp {
    id         String   @id @default(uuid()) @db.Char(36)
    user_id    String   @unique
    otp        String
    created_at DateTime @default(now())
    expires_at DateTime
    user       User?    @relation(fields: [user_id], references: [id])
}
